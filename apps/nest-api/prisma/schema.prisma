// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
}

model User {
  id                String            @id @default(cuid())
  uuid              String            @unique @default(uuid())
  email             String            @unique
  image             String?
  name              String?
  isActiveAccount   Boolean           @default(false)
  password          String?
  refreshToken      String?
  accessToken       String?
  resetToken        String?
  resetTokenExpires DateTime?
  role              Role              @default(USER)
  Session           Session[]
  PasswordHistory   PasswordHistory[]
  ProfileImage      ProfileImage[]
  Address           Address[]
  Preferences       Preferences[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([email])
  @@index([role])
  @@map("users")
}

model Address {
  id          String   @id @default(cuid())
  uuid        String   @unique @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  addressLine String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("addresses")
}

model Preferences {
  id                     String   @id @default(cuid())
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])
  emailNotifications     Boolean  @default(true)
  productRecommendations Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userId])
  @@map("preferences")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String?
  userAgent String?
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  isActive  Boolean  @default(true)

  @@index([userId])
  @@index([token])
  @@map("sessions")
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@map("blacklistedTokens")
}

model ProfileImage {
  id        String   @id @default(cuid())
  userId    String
  uuid      String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  imageUrl  String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([imageUrl])
  @@map("profileImages")
}

model PasswordHistory {
  id        String   @id @default(cuid())
  userId    String
  password  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("passwordHistorys")
}
