// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider  = "cockroachdb"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
}

enum TicketStatus {
  PENDING
  OPEN
  CLOSED
}

model User {
  id                String            @id @default(cuid())
  uuid              String            @unique @default(uuid())
  email             String            @unique
  image             String?
  name              String?
  isActiveAccount   Boolean           @default(false)
  password          String?
  refreshToken      String?
  accessToken       String?
  resetToken        String?
  resetTokenExpires DateTime?
  role              Role              @default(USER)
  PasswordHistory   PasswordHistory[]
  ProfileImage      ProfileImage[]
  Address           Address[]
  Preferences       Preferences[]
  SupportTicket     SupportTicket[]
  ActiviyLog        ActivityLog[]
  deletedAt         DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([email])
  @@index([role])
  @@map("users")
}

model Address {
  id          String   @id @default(cuid())
  uuid        String   @unique @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressLine String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, isDefault])
  @@map("addresses")
}

model Preferences {
  id                     String   @id @default(cuid())
  userId                 String
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications     Boolean  @default(true)
  productRecommendations Boolean  @default(true)
  language               String   @default("en")
  currency               String   @default("USD")
  timeZone               String   @default("UTC")
  darkMode               Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([userId])
  @@map("preferences")
}

model SupportTicket {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject     String
  description String
  status      TicketStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId, status])
  @@map("support_tickets")
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@map("blacklistedTokens")
}

model ProfileImage {
  id        String   @id @default(cuid())
  userId    String
  uuid      String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl  String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([imageUrl])
  @@map("profileImages")
}

model PasswordHistory {
  id        String   @id @default(cuid())
  userId    String
  password  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("passwordHistorys")
}

model ActivityLog {
  id        String   @id @default(cuid())
  adminId   String
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  action    String
  targetId  String?
  createdAt DateTime @default(now())

  @@index([adminId])
  @@map("activity_logs")
}
