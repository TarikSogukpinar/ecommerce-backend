basePath: /
definitions:
  models.Category:
    properties:
      name:
        type: string
    type: object
  models.Product:
    properties:
      category:
        allOf:
        - $ref: '#/definitions/models.Category'
        description: Foreign Key
      category_id:
        type: integer
      description:
        type: string
      discount_price:
        type: number
      id:
        type: integer
      image:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      sku:
        type: string
      stock:
        type: integer
    type: object
  models.ProductCreateInput:
    properties:
      category_id:
        type: integer
      description:
        type: string
      discount_price:
        type: number
      id:
        type: integer
      image:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      sku:
        type: string
      stock:
        type: integer
    type: object
  models.ProductUpdateInput:
    properties:
      category_id:
        type: integer
      description:
        type: string
      discount_price:
        type: number
      id:
        type: integer
      image:
        type: string
      is_active:
        type: boolean
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      sku:
        type: string
      stock:
        type: integer
    type: object
host: localhost:3011
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for a Fiber application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Mock-API Swagger Example API
  version: "1.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Fetch all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category in the system
      parameters:
      - description: Category body
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new category
      tags:
      - Categories
  /categories/{id}:
    delete:
      description: Remove a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a category
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: Fetch category details by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get category by ID
      tags:
      - Categories
  /products:
    get:
      consumes:
      - application/json
      description: Returns all products
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      summary: GetAllProducts
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Creates a new product with the given data
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ürün oluşturma verileri
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
      summary: CreateProduct
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product with the given ID
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ürün ID'si
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Updates a product with the given data
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ürün ID'si
        in: path
        name: id
        required: true
        type: string
      - description: Ürün güncelleme verileri
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Update a product
      tags:
      - Products
  /products/price-range:
    get:
      consumes:
      - application/json
      description: Returns products within a specified price range, optionally sorted
        by price.
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Minimum price
        in: query
        name: min_price
        required: true
        type: number
      - description: Maximum price
        in: query
        name: max_price
        required: true
        type: number
      - description: Sort order (asc or desc)
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to fetch products
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get products by price range
      tags:
      - Products
swagger: "2.0"
